First time using regex!
Starting of with (,)( [0-9]{4})(.+) n the Regex tester looking at the references I thought \2 might be what I want to do to replace the above. As \2 back referenced to #2 in the brackets. 
When I typed it in however nothing was happening in the view for finding the values. It was confusing me as I though as it wasn’t finding the numbers.
I removed the \2 and still saw nothing highlighted.
Enter in grep ‘[0-9]{4}’ – this showed me all the numbers I was looking for highlighted
Then typed in (,)([0-9]{4})(.+) which again turned up nothing
Copied your text (,)( [0-9]{4})(.+) and it work. This confused me for a couple of seconds and then I realised I was missing a space in mine.
Added the space and I got the results I was expecting now in the browser tester.
Added the \2 and saw it place a red dot which I assumed it meant it would replace said text with whatever the red dots value was.

65 sed -r -i.bak '(,)( [0-9]{4})(.+)\2'/g index.txt forgot  the s/
 66 sed -r -i.bak 's/(,)( [0-9]{4})(.+)\2'/g index.txt forgot to terminate s/
 67 sed -r -i.bak 's/(,)( [0-9]{4})(.+)/\2'/g index.txt worked!
To replace the ~ was going to run the command s/(~)/\1/g but I realised the would probably replace ~ with ~ as the back reference was the thing I was trying to remove.
s/(~)/\S/g was the next thing I thought as \S was a character class the represented not whitespace
71  sed -r -i.bak 's/(~)/\S'/g index.txt nope replaced ~ with a capital S
76 mv index.txt.bak index.txt  replaced with backup
77 nano index.txt checked it
78 sed -r -i.bak 's/(~)/\'/g index.txt  s/ was not terminated, was thinking it need \ before /g to replace ~ with ‘’ 
79 sed -r -i.bak 's/(~)/'/g index.txt checked it and it worked
82  sed -r -i.bak 's/( to)/,/g' index.txt figured after the lessons learned with ~ and whitespaces counting this would work and it did!

85 grep '.+,.+,.+,' index.txt 
86 sed '.+,.+,.+,' index.txt 
87 nano index.txt 
88 grep .+,.+,.+, index.txt 
89 grep -E .+,.+,.+, index.txt  Though I was going crazy so scrolled to see what I should type, didn’t realise this need to use extended regex to work


Cleaning up the data

I probably should of looked up something to tell me the line # when running the grep command to find the extra comma's

Cleaning up senders
This is really cool but you have to be careful playing around with the values in clusters I noticed you have to read through them just in case it groups something wrong
but many would be very close.
Also tried removing the 2 rows as they were not letters, however the first time I removed them from the cluster view not the actual table.
Found the menu that removed similar, so just made sure to have the rows flagged and removed them
For the recipient, I found it more difficult to clean up the data as a lot were similar but stated people who had different names like secretary of state. Does it matter who that person is? I don't know so i left it.
Cleaned up the date a bit but that is trickier i find as February 11 is not February 1, but it also on a side note could of been a miss read value
Cleaned up the leading and traing whitespaces for all rows
Other Thoughts:
This is a really cool tool and I don't know why its not used more. I've personal worked on data so many times where this tool would of saved me hours for data clean up. It was never
mentioned in classes like databases and I think that itself is a mistake. Thank you for including this in the course and i will defiantly be using it again!
Also regex drove me a little nuts, I had to take a break as it was not doing what I expected :p Not the style I am used to for sure, but there "cheat sheet" and manual help a ton
